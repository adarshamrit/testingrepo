{"ast":null,"code":"var _jsxFileName = \"D:\\\\myproject2\\\\my-app\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const addToCart = product => {\n    // Check if the product is already in the cart\n    const existingProductIndex = cart.findIndex(item => item.id === product.id);\n    if (existingProductIndex !== -1) {\n      // If the product is already in the cart, update its quantity\n      const updatedCart = [...cart];\n      updatedCart[existingProductIndex].quantity += 1;\n      setCart(updatedCart);\n    } else {\n      // If the product is not in the cart, add it with a quantity of 1\n      setCart([...cart, {\n        ...product,\n        quantity: 1\n      }]);\n    }\n  };\n  const clearCart = () => {\n    setCart([]);\n  };\n  const removeFromCart = productId => {\n    const updatedCart = cart.filter(product => product.id !== productId);\n    setCart(updatedCart);\n  };\n  const calculateTotalAmount = () => {\n    return cart.reduce((total, product) => total + product.price * product.quantity, 0);\n  };\n  const contextValue = {\n    cart,\n    addToCart,\n    clearCart,\n    removeFromCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"ZqFaEIYkzI5UoYUmTgmqHbYYm/0=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","CartContext","useCart","_s","context","Error","CartProvider","children","_s2","cart","setCart","addToCart","product","existingProductIndex","findIndex","item","id","updatedCart","quantity","clearCart","removeFromCart","productId","filter","calculateTotalAmount","reduce","total","price","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/myproject2/my-app/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cart, setCart] = useState([]);\r\n\r\n  const addToCart = (product) => {\r\n    // Check if the product is already in the cart\r\n    const existingProductIndex = cart.findIndex((item) => item.id === product.id);\r\n  \r\n    if (existingProductIndex !== -1) {\r\n      // If the product is already in the cart, update its quantity\r\n      const updatedCart = [...cart];\r\n      updatedCart[existingProductIndex].quantity += 1;\r\n      setCart(updatedCart);\r\n    } else {\r\n      // If the product is not in the cart, add it with a quantity of 1\r\n      setCart([...cart, { ...product, quantity: 1 }]);\r\n    }\r\n  };\r\n  \r\n\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n  const removeFromCart = (productId) => {\r\n    const updatedCart = cart.filter((product) => product.id !== productId);\r\n    setCart(updatedCart);\r\n  };\r\n  const calculateTotalAmount = () => {\r\n    return cart.reduce((total, product) => total + product.price * product.quantity, 0);\r\n  };\r\n  \r\n  \r\n\r\n  const contextValue = {\r\n    cart,\r\n    addToCart,\r\n    clearCart,\r\n    removeFromCart,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={contextValue}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGP,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMa,SAAS,GAAIC,OAAO,IAAK;IAC7B;IACA,MAAMC,oBAAoB,GAAGJ,IAAI,CAACK,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;IAE7E,IAAIH,oBAAoB,KAAK,CAAC,CAAC,EAAE;MAC/B;MACA,MAAMI,WAAW,GAAG,CAAC,GAAGR,IAAI,CAAC;MAC7BQ,WAAW,CAACJ,oBAAoB,CAAC,CAACK,QAAQ,IAAI,CAAC;MAC/CR,OAAO,CAACO,WAAW,CAAC;IACtB,CAAC,MAAM;MACL;MACAP,OAAO,CAAC,CAAC,GAAGD,IAAI,EAAE;QAAE,GAAGG,OAAO;QAAEM,QAAQ,EAAE;MAAE,CAAC,CAAC,CAAC;IACjD;EACF,CAAC;EAGD,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtBT,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EACD,MAAMU,cAAc,GAAIC,SAAS,IAAK;IACpC,MAAMJ,WAAW,GAAGR,IAAI,CAACa,MAAM,CAAEV,OAAO,IAAKA,OAAO,CAACI,EAAE,KAAKK,SAAS,CAAC;IACtEX,OAAO,CAACO,WAAW,CAAC;EACtB,CAAC;EACD,MAAMM,oBAAoB,GAAGA,CAAA,KAAM;IACjC,OAAOd,IAAI,CAACe,MAAM,CAAC,CAACC,KAAK,EAAEb,OAAO,KAAKa,KAAK,GAAGb,OAAO,CAACc,KAAK,GAAGd,OAAO,CAACM,QAAQ,EAAE,CAAC,CAAC;EACrF,CAAC;EAID,MAAMS,YAAY,GAAG;IACnBlB,IAAI;IACJE,SAAS;IACTQ,SAAS;IACTC;EACF,CAAC;EAED,oBACEpB,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAApB,QAAA,EACvCA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACzB,GAAA,CA5CWF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}